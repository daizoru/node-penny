// Generated by CoffeeScript 1.4.0
(function() {
  var Amount, EUR, USD, currencies, currency, currencyName, inspect, operands, _fn,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require('util').inspect;

  require('colors');

  currencies = {};

  currencies.USD = USD = {
    code: 'USD',
    name: 'U.S. Dollar',
    symbol: '$',
    prefix: true
  };

  currencies.EUR = EUR = {
    code: 'EUR',
    name: 'Euro',
    symbol: 'â‚¬',
    prefix: false
  };

  operands = [];

  Amount = (function() {

    function Amount(value, currency, oldValue) {
      this.value = value;
      this.currency = currency;
      this.oldValue = oldValue != null ? oldValue : this.value;
      this.toString = __bind(this.toString, this);

      this.isZero = __bind(this.isZero, this);

      this.isPositive = __bind(this.isPositive, this);

      this.isNegative = __bind(this.isNegative, this);

      this.sameCurrency = __bind(this.sameCurrency, this);

      this.mult = __bind(this.mult, this);

      this.mul = __bind(this.mul, this);

      this.sub = __bind(this.sub, this);

      this.set = __bind(this.set, this);

      this.multiply = __bind(this.multiply, this);

      this.substract = __bind(this.substract, this);

      this.add = __bind(this.add, this);

      this.to = __bind(this.to, this);

      if (this.value > this.oldValue) {
        if (this.value > 0) {
          this.color = 'green';
        } else if (this.value < 0) {
          this.color = 'yellow';
        } else {
          this.color = 'white';
        }
      } else if (this.value < this.oldValue) {
        if (this.value > 0) {
          this.color = 'yellow';
        } else if (this.value < 0) {
          this.color = 'red';
        } else {
          this.color = 'red';
        }
      } else {
        this.color = 'white';
      }
    }

    Amount.prototype.to = function(currency) {
      if (!(currency in currencies)) {
        throw "unknow " + currency;
      }
      if (this.currency.code === currency) {
        return this.value;
      } else {
        0;

        throw "automatic currency conversion is not implemented yet";
      }
    };

    Amount.prototype.add = function(amount) {
      return new Amount(this.value + amount.to(this.currency.code), this.currency, this.value);
    };

    Amount.prototype.substract = function(amount) {
      return new Amount(this.value - amount.to(this.currency.code), this.currency, this.value);
    };

    Amount.prototype.multiply = function(amount) {
      return new Amount(this.value * amount.to(this.currency.code), this.currency, this.value);
    };

    Amount.prototype.set = function(amount) {
      return new Amount(amount.to(this.currency.code), this.currency, this.value);
    };

    Amount.prototype.sub = function(amount) {
      return this.substract(amount);
    };

    Amount.prototype.mul = function(amount) {
      return this.multiply(amount);
    };

    Amount.prototype.mult = function(amount) {
      return this.multiply(amount);
    };

    Amount.prototype.sameCurrency = function(other) {
      return this.currency.code === other.code;
    };

    Amount.prototype.isNegative = function() {
      return this.value < 0;
    };

    Amount.prototype.isPositive = function() {
      return this.value > 0;
    };

    Amount.prototype.isZero = function() {
      return this.value === 0;
    };

    Amount.prototype.toString = function() {
      var sign, str,
        _this = this;
      sign = (function() {
        if (_this.value === _this.oldValue) {
          if (_this.value > 0) {
            return '+';
          } else {
            if (_this.value < 0) {
              return '-';
            } else {
              return ' ';
            }
          }
        } else {
          if (_this.value > _this.oldValue) {
            return '+';
          } else {
            if (_this.value < _this.oldValue) {
              return '-';
            } else {
              return ' ';
            }
          }
        }
      })();
      str = (function() {
        if (_this.currency.prefix) {
          return "" + sign + _this.currency.symbol + (Math.abs(_this.value));
        } else {
          return "" + sign + (Math.abs(_this.value)) + _this.currency.symbol;
        }
      })();
      switch (this.color) {
        case 'green':
          return str.green;
        case 'red':
          return str.red;
        case 'yellow':
          return str.yellow;
        default:
          return str;
      }
    };

    return Amount;

  })();

  _fn = function(currencyName, currency) {
    Object.defineProperty(Number.prototype, currencyName.toUpperCase(), {
      enumerable: false,
      configurable: false,
      get: function() {
        return new Amount(0 + this, currency);
      }
    });
    return Object.defineProperty(Number.prototype, currencyName.toLowerCase(), {
      enumerable: false,
      configurable: false,
      get: function() {
        return new Amount(0 + this, currency);
      }
    });
  };
  for (currencyName in currencies) {
    currency = currencies[currencyName];
    _fn(currencyName, currency);
  }

  Object.defineProperty(Number.prototype, 'B', {
    enumerable: false,
    configurable: false,
    get: function() {
      return (0 + this) * 1000000000;
    }
  });

  Object.defineProperty(Number.prototype, 'M', {
    enumerable: false,
    configurable: false,
    get: function() {
      return (0 + this) * 1000000;
    }
  });

  Object.defineProperty(Number.prototype, 'K', {
    enumerable: false,
    configurable: false,
    get: function() {
      return (0 + this) * 1000;
    }
  });

}).call(this);
